//-------------------------------------------------------------------
// Простой пример работы с астрактными классами
//-------------------------------------------------------------------
#include <iostream>
using namespace std;
//-------------------------------------------------------------------
// Абстрактная фигура
class Shape
{
 public:
    // Виртуальный метод поиска площади фигуры (нет реализации)
    virtual float calcArea() = 0;

    // Метод для печати
    virtual void print()
    {
        cout << "[Shape]" << endl;
    }

    // Конструктор
    Shape()
    {
        cout << "Shape created" << endl;
    }

    // Виртуальный деструктор (!)
    virtual ~Shape()
    {
        cout << "Shape deleted" << endl;
    }
};
//-------------------------------------------------------------------
// Круг
class Circle: public Shape
{
 public:
    int r;

    Circle(int radius)
    {
        r = radius;
        cout << "Circle created!" << endl;
    }

    ~Circle()
    {
        cout << "Circle deleted!" << endl;
    }

    float calcArea()
    {
        return 3.14 * r * r;
    }
};
//-------------------------------------------------------------------
// Квадрат
class Square: public Shape
{
 public:
    int a;

    Square(int width)
    {
        a = width;
        cout << "Square created!" << endl;
    }

    ~Square()
    {
        cout << "Square deleted!" << endl;
    }

    float calcArea()
    {
        return a * a;
    }

    // Переопределяет метод для печати
    virtual void print()
    {
        cout << "[Square]" << endl;
    }

};
//-------------------------------------------------------------------
int main()
{

    // Shape test(); // Не выйдет - абстрактный класс (!)
    // Не хватает реализации calcArea()

    //---------------------------------------------------------------

    Circle circle(2); // Создал круг
    cout << endl;

    Square square(5); // Создал квадрат
    cout << endl;

    //---------------------------------------------------------------

    Shape *test; // Объявим указатель на фигуру (объект не создаем)

    test = &circle; // Записываем в указатель на фигуру адрес круга
    // Можем, т.к. наследники содержат все данные и методы родителя
    // и они могут "прикинуться" объектом класса Shape

    test = &square; // Аналогично для квадрата

    //---------------------------------------------------------------

    // Теперь для удобства запишем также, только в массив
    Shape *arr[2] = { &circle, &square }; // Создаем массив из фигур

    //---------------------------------------------------------------
    
    // Произведем действия над данным массивом фигур (поиск площади)
    for (size_t i = 0; i < 2; ++i)
    {
        cout << "Area #" << i << " = " << arr[i]->calcArea() << endl;
        arr[i]->print(); // Проверка переопределения метода print
        cout << endl;
    }

    //---------------------------------------------------------------

    // А после завершения функции статические объекты удаляются
    // т.к. выходят из области видимости

    return 0;
}
//-------------------------------------------------------------------
//                                                       by SnipGhost
//-------------------------------------------------------------------